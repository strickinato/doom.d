;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

* Personal Info

(Came w/ doom)

#+BEGIN_SRC emacs-lisp

(setq user-full-name "Aaron Strick"
      user-mail-address "aaronstrick@gmail.com")

#+END_SRC

* Appearances
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+BEGIN_SRC emacs-lisp

(setq doom-font (font-spec :family "Fira Code" :size 14))

#+END_SRC

#+RESULTS:
: #<font-spec nil nil Fira\ Code nil nil nil nil nil 14 nil nil nil nil>

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
#+BEGIN_SRC emacs-lisp

(setq doom-theme 'doom-outrun-electric)

#+END_SRC

* UI Defaults
** Defaults
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
#+BEGIN_SRC emacs-lisp

(setq display-line-numbers-type t)

#+END_SRC
** Treemacs
Find the treemacs config options[[https://github.com/Alexander-Miller/treemacs#installation][ here]]

#+begin_src emacs-lisp :tangle yes

(after! treemacs
  (treemacs-resize-icons 0))

#+end_src

* Org

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

* Doom "docs"

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
they are implemented.

* Zetteldeft

#+BEGIN_SRC emacs-lisp

(use-package! zetteldeft
  :config
  (setq deft-directory "~/Dropbox/zettel")
)

#+END_SRC

* Bindings

#+BEGIN_SRC emacs-lisp

(map!
    :leader
    :desc "Launch Zetteldeft" :gn "n SPC" #'zetteldeft-deft-new-search
    :desc "New File" :gn "z n" #'zetteldeft-new-file
    :desc "New File and Link" :gn "z N" #'zetteldeft-deft-new-search-and-link
    )
#+END_SRC

* Org extension
#+BEGIN_SRC emacs-lisp

(use-package! org-jira
  :after org
  :config
  (setq jiralib-url "https://fictiv.atlassian.net"))

#+END_SRC
